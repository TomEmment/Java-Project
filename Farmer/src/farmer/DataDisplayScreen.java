/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package farmer;

import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;

//import org.apache.poi.ss.usermodel.*;
//import static javaserver.Server1.din;
import java.awt.BorderLayout;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;
import java.io.FileWriter;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Thoma
 */
public class DataDisplayScreen extends javax.swing.JFrame {
    
    int Instance = 0;
    String Choice = "";
    String username, address = "localhost";
    ArrayList<String> users = new ArrayList();
    int port = 2222;
    Boolean isConnected = false;
    String Nitrogen;
    
    Socket sock;
    BufferedReader reader;
    PrintWriter writer;
    String StaticData;
    String TimeData;
    String TempreatureData = "TempreatureData:";
    String HumidityData = "HumidityData:";
    String SoilPHData = "SoilPHData:";
    String WindSpeedData = "WindSpeedData:";  
    String SleepTime;
    
 
    public void ListenThread() 
    {
         Thread IncomingReader = new Thread(new DataDisplayScreen.IncomingReader());
         IncomingReader.start();
    }
/**
 * 
     * Creates new form DataDisplayScreen
     */
    public DataDisplayScreen(String Station,String Sleep) {
        initComponents();
        try     
            {
                SleepTime = Sleep;
                sock = new Socket(address, port);
                InputStreamReader streamreader = new InputStreamReader(sock.getInputStream());
                reader = new BufferedReader(streamreader);
                writer = new PrintWriter(sock.getOutputStream());
                writer.println("Connect;FarmerJohn");
                writer.flush(); 
                writer.println("DataRequest;"+Station+";"+Sleep);
                writer.flush();  
            } 
            catch (IOException ex) 
            {
                System.out.println("Cannot Connect! Try Again. \n");
            }
            
            ListenThread(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        South = new javax.swing.JButton();
        WestPosition = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        DisplayTempreatureData = new javax.swing.JTextArea();
        jLabel28 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        DisplayHumidityData = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        DisplayWindSpeedData = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        WeatherStationData = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        VariableX = new javax.swing.JComboBox<>();
        VariableY = new javax.swing.JComboBox<>();
        saveLabel = new javax.swing.JLabel();
        saveText = new javax.swing.JTextField();
        fileTypeCombo = new javax.swing.JComboBox<>();
        saveButton = new javax.swing.JButton();
        SouthPosition = new javax.swing.JTextField();
        North = new javax.swing.JButton();
        EastPosition = new javax.swing.JTextField();
        East = new javax.swing.JButton();
        NorthPosition = new javax.swing.JTextField();
        West = new javax.swing.JButton();
        Jfreechartpanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        ActiveStation = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        TempChoice = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        HumidityChoice = new javax.swing.JComboBox<>();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        SoilPHChoice = new javax.swing.JComboBox<>();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        WindChoice = new javax.swing.JComboBox<>();
        jLabel24 = new javax.swing.JLabel();
        Slider1 = new javax.swing.JSlider();
        jLabel32 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        DisplaySoilPHData = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        WindTrends = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        SoilTrends = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        HumidityTrends = new javax.swing.JTextArea();
        jScrollPane9 = new javax.swing.JScrollPane();
        TempTrends = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        South.setText("Connect");
        South.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SouthActionPerformed(evt);
            }
        });

        WestPosition.setText("No Connected Station");
        WestPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WestPositionActionPerformed(evt);
            }
        });

        jLabel25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/farmer/resources/Tempreature.png"))); // NOI18N

        jLabel1.setText("Tempreature Data:");

        DisplayTempreatureData.setColumns(20);
        DisplayTempreatureData.setRows(5);
        jScrollPane2.setViewportView(DisplayTempreatureData);

        jLabel28.setIcon(new javax.swing.ImageIcon(getClass().getResource("/farmer/resources/Humidity.png"))); // NOI18N

        DisplayHumidityData.setColumns(20);
        DisplayHumidityData.setRows(5);
        jScrollPane6.setViewportView(DisplayHumidityData);

        jLabel2.setText("Humidity Data:");

        jLabel26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/farmer/resources/SoilPH.png"))); // NOI18N

        jLabel3.setText("SoilPH Data:");

        jLabel27.setIcon(new javax.swing.ImageIcon(getClass().getResource("/farmer/resources/WindSpeed.png"))); // NOI18N

        DisplayWindSpeedData.setColumns(20);
        DisplayWindSpeedData.setRows(5);
        jScrollPane4.setViewportView(DisplayWindSpeedData);

        jLabel4.setText("Wind Speed Data:");

        WeatherStationData.setColumns(20);
        WeatherStationData.setRows(5);
        jScrollPane5.setViewportView(WeatherStationData);

        jLabel5.setText("Station information:");

        VariableX.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tempreature", "Humidity", "SoilPH", "WIndSpeed" }));
        VariableX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VariableXActionPerformed(evt);
            }
        });

        VariableY.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tempreature", "Humidity", "SoilPH", "WIndSpeed" }));
        VariableY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VariableYActionPerformed(evt);
            }
        });

        saveLabel.setText("Filename:");

        fileTypeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Text", "Excel" }));
        fileTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileTypeComboActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        SouthPosition.setText("No Connected Station");
        SouthPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SouthPositionActionPerformed(evt);
            }
        });

        North.setText("Connect");
        North.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NorthActionPerformed(evt);
            }
        });

        EastPosition.setText("No Connected Station");
        EastPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EastPositionActionPerformed(evt);
            }
        });

        East.setText("Connect");
        East.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EastActionPerformed(evt);
            }
        });

        NorthPosition.setText("No Connected Station");
        NorthPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NorthPositionActionPerformed(evt);
            }
        });

        West.setText("Connect");
        West.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JfreechartpanelLayout = new javax.swing.GroupLayout(Jfreechartpanel);
        Jfreechartpanel.setLayout(JfreechartpanelLayout);
        JfreechartpanelLayout.setHorizontalGroup(
            JfreechartpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1116, Short.MAX_VALUE)
        );
        JfreechartpanelLayout.setVerticalGroup(
            JfreechartpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 530, Short.MAX_VALUE)
        );

        jLabel7.setText("West:");

        jLabel8.setText("South:");

        jLabel9.setText("East:");

        jLabel10.setText("North:");

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/farmer/resources/Compass.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15)
                .addContainerGap(53, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        jLabel16.setText("Active Station:");

        ActiveStation.setText("WeatherStation1");

        jLabel17.setText("Last");

        TempChoice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "5", "10", "20", "50" }));
        TempChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TempChoiceActionPerformed(evt);
            }
        });

        jLabel18.setText("Entrys");

        jLabel19.setText("Last");

        HumidityChoice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "5", "10", "20", "50" }));
        HumidityChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HumidityChoiceActionPerformed(evt);
            }
        });

        jLabel20.setText("Entrys");

        jLabel21.setText("Last");

        SoilPHChoice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "5", "10", "20", "50" }));
        SoilPHChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SoilPHChoiceActionPerformed(evt);
            }
        });

        jLabel22.setText("Entrys");

        jLabel23.setText("Last");

        WindChoice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "5", "10", "20", "50" }));
        WindChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WindChoiceActionPerformed(evt);
            }
        });

        jLabel24.setText("Entrys");

        Slider1.setMajorTickSpacing(1);
        Slider1.setMaximum(4);
        Slider1.setOrientation(javax.swing.JSlider.VERTICAL);
        Slider1.setPaintTicks(true);
        Slider1.setSnapToTicks(true);
        Slider1.setToolTipText("");
        Slider1.setValue(2);

        jLabel32.setText("Nitrogen Levels:");

        jLabel29.setText("Surplus");

        jLabel30.setText("Depleted");

        jLabel31.setText("Normal");

        jLabel33.setText("High");

        jLabel34.setText("Low");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 468, Short.MAX_VALUE)
        );

        DisplaySoilPHData.setColumns(20);
        DisplaySoilPHData.setRows(5);
        jScrollPane3.setViewportView(DisplaySoilPHData);

        jLabel6.setText("Stations in field:");

        WindTrends.setColumns(20);
        WindTrends.setRows(5);
        WindTrends.setText("Staying Stable...");
        jScrollPane1.setViewportView(WindTrends);

        SoilTrends.setColumns(20);
        SoilTrends.setRows(5);
        SoilTrends.setText("Staying Stable...");
        jScrollPane7.setViewportView(SoilTrends);

        HumidityTrends.setColumns(20);
        HumidityTrends.setRows(5);
        HumidityTrends.setText("Staying Stable...");
        jScrollPane8.setViewportView(HumidityTrends);

        TempTrends.setColumns(20);
        TempTrends.setRows(5);
        TempTrends.setText("Staying Stable...");
        jScrollPane9.setViewportView(TempTrends);

        jLabel11.setText("VariableX:");

        jLabel12.setText("VariableY:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel27)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel23)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(WindChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel24))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel25)
                            .addComponent(jLabel28)
                            .addComponent(jLabel26))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel21)
                                        .addGap(9, 9, 9)
                                        .addComponent(SoilPHChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(8, 8, 8)
                                        .addComponent(jLabel22))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel2)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabel19)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(HumidityChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabel20)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel17)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(TempChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel18))
                                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(saveLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveText, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fileTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton)))
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(164, 164, 164)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(VariableX, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(98, 98, 98)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(VariableY, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(76, 76, 76)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ActiveStation, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16)))
                    .addComponent(Jfreechartpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(266, 266, 266))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(EastPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(East)
                        .addGap(18, 18, 18)
                        .addComponent(NorthPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(West))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(WestPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(North))
                            .addComponent(jLabel7)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SouthPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(South))
                            .addComponent(jLabel10))))
                .addGap(94, 94, 94)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(139, 139, 139)
                .addComponent(jLabel32)
                .addGap(33, 33, 33)
                .addComponent(Slider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel30)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel31)
                        .addComponent(jLabel29))
                    .addComponent(jLabel33)
                    .addComponent(jLabel34))
                .addGap(356, 356, 356))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel17)
                            .addComponent(TempChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(14, 14, 14)
                                            .addComponent(jLabel16))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel11)
                                            .addComponent(jLabel12))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(ActiveStation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(VariableY, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(VariableX, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(23, 23, 23)
                                        .addComponent(Jfreechartpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel27)
                                                .addGap(84, 84, 84))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(84, 84, 84)
                                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel21)
                                                    .addComponent(SoilPHChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel22))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel23)
                                                    .addComponent(WindChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel24))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)
                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(22, 22, 22)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(saveLabel)
                                            .addComponent(saveText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(fileTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(saveButton))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel19)
                            .addComponent(HumidityChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20))
                        .addGap(1, 1, 1)
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel8)
                                .addComponent(jLabel7)
                                .addComponent(jLabel6))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(WestPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(North)
                                .addComponent(SouthPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(South))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel9)
                                .addComponent(jLabel10))
                            .addGap(7, 7, 7)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(EastPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(East)
                                .addComponent(NorthPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(West))
                            .addGap(32, 32, 32))
                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel32)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel29)
                                    .addGap(30, 30, 30)
                                    .addComponent(jLabel33)
                                    .addGap(29, 29, 29)
                                    .addComponent(jLabel31)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel34)
                                    .addGap(30, 30, 30)
                                    .addComponent(jLabel30))
                                .addComponent(Slider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(42, 42, 42))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void WestPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WestPositionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_WestPositionActionPerformed

    private void SouthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SouthActionPerformed
         String temp;
        temp = SouthPosition.getText();
        if (temp.equals("No Connected Station"))
        {
            System.out.println("No Station Avaliable");
        }  
        else
        {
            writer.println("ChangeActive;"+username+";"+temp+";"+SleepTime);
            writer.flush();           
        }       // TODO add your handling code here:
    }//GEN-LAST:event_SouthActionPerformed

    private void WestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WestActionPerformed
        String temp;
        temp = WestPosition.getText();
        if (temp.equals("No Connected Station"))
        {
            System.out.println("No Station Avaliable");
        }  
        else
        {
            writer.println("ChangeActive;"+username+";"+temp+";"+SleepTime);
            writer.flush();           
        }       // TODO add your handling code here:
    }//GEN-LAST:event_WestActionPerformed

    private void NorthPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NorthPositionActionPerformed

    }//GEN-LAST:event_NorthPositionActionPerformed

    private void SouthPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SouthPositionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SouthPositionActionPerformed

    private void NorthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NorthActionPerformed
        String temp;
        temp = NorthPosition.getText();
        if (temp.equals("No Connected Station"))
        {
            System.out.println("No Station Avaliable");
        }  
        else
        {
            writer.println("ChangeActive;"+username+";"+temp+";"+SleepTime);
            writer.flush();           
        }      // TODO add your handling code here:
    }//GEN-LAST:event_NorthActionPerformed

    private void EastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EastActionPerformed
        String temp;
        temp = EastPosition.getText();
        if (temp.equals("No Connected Station"))
        {
            System.out.println("No Station Avaliable");
        }  
        else
        {
            writer.println("ChangeActive;"+username+";"+temp+";"+SleepTime);
            writer.flush();           
        }
// TODO add your handling code here:
    }//GEN-LAST:event_EastActionPerformed

    private void EastPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EastPositionActionPerformed

    }//GEN-LAST:event_EastPositionActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        String ITrickedyou;
        if("Text".equals(fileTypeCombo.getSelectedItem().toString())){
            // collect all data
            // format username, static data, time, temperature, temp, humidity,soilph, windseed
            String fileName = saveText.getText()+".txt";
            try{
                FileWriter fout = new FileWriter(fileName,true);
                BufferedWriter x = new BufferedWriter(fout);
                PrintWriter pout = new PrintWriter(x);
                pout.println(username);
                pout.println(StaticData);
                pout.println(TimeData);
                pout.println(TempreatureData);
                pout.println(HumidityData);
                pout.println(SoilPHData);
                pout.println(WindSpeedData);
                pout.close();
                x.close();
                fout.close();

            }catch(IOException e){

            }

        }else{
            // Save file to Excel
            String name = saveText.getText();//+".xlsx";
            System.out.println(name);
            String fileName = name + ".xlsx";
            //try {
                /*Object[][] datatypes ={{"Time Data",TimeData},
                    {"Temperature",TempreatureData},
                    {"Humidity",HumidityData},
                    {"soilPH",SoilPHData},
                    {"windSpeed",WindSpeedData},
                };*/

                XSSFWorkbook workbook = new XSSFWorkbook();
                String Names = "Username:,"+username;
                String Static1 = "Static Data:,"+StaticData;
                XSSFSheet sheet  = workbook.createSheet("fileName");
                String[] Name = Names.split(",");
                String[] Static = Static1.split(",");
                ITrickedyou = "TimeData:" + TimeData;
                
                String[] Humidity = HumidityData.split(",");

                int index = Humidity[0].indexOf(":");
                Humidity[0] = Humidity[0].substring(0,index);

                String[] Time = ITrickedyou.split(",");

                index = Time[0].indexOf(":");
                Time[0] = Time[0].substring(0,index);
                String[] Temperature = TempreatureData.split(",");


                index = Temperature[0].indexOf(":");
                Temperature[0] = Temperature[0].substring(0,index);
                
                
                String[] soilPH = SoilPHData.split(",");
                //soilPH[0].split(":");
                index = soilPH[0].indexOf(":");
                soilPH[0] = soilPH[0].substring(0,index);
                
                
                String[] windSpeed = WindSpeedData.split(",");
                //windSpeed[0].split(":");
                index = windSpeed[0].indexOf(":");
                windSpeed[0] = windSpeed[0].substring(0,index);
                /*String[] Time = TimeData.split(":");
                String nameTime = Time[0];
                String[] Time1 = Time[1].split(",");

                String[] Temperature = TempreatureData.split(":");
                String nameTemp = Temperature[0];
                String[] Temp1 = Temperature[1].split(",");

                String[] Humidity = HumidityData.split(":");
                String nameHumidity = Humidity[0];
                String[] Humidity1 = Humidity[1].split(",");

                String[] soilPH = SoilPHData.split(":");
                String namesoilPH = soilPH[0];
                String[] soilPH1 = soilPH[1].split(",");

                String[] windSpeed = WindSpeedData.split(":");
                String namewindSpeed = windSpeed[0];
                String[] windSpeed1 = windSpeed[1].split(",");*/

                ArrayList<String[]> dataArr = new ArrayList<>();
                dataArr.add(Name);
                dataArr.add(Static);
                dataArr.add(Time);
                dataArr.add(Temperature);
                dataArr.add(Humidity);
                dataArr.add(soilPH);
                dataArr.add(windSpeed);

                /*ArrayList<String> nameArr = new ArrayList<>();
                nameArr.add(nameTime);
                nameArr.add(nameTemp);
                nameArr.add(nameHumidity);
                nameArr.add(namesoilPH);
                nameArr.add(namewindSpeed);*/

                int rowNum = 0;
                System.out.println("Creating Excel Spreadsheet");
                
                /*
                //Writing variable names to first column
                for(String datatype : nameArr){
                    Row row = sheet.createRow(rowNum++);
                    int colNum = 0;
                    Cell cell = row.createCell(colNum);
                    if (datatype instanceof String){
                        cell.setCellValue((String) datatype);
                    }
                }
*/
                // Writing data
                rowNum = 0;
                for(String[] datatype : dataArr){
                    Row row = sheet.createRow(rowNum++);
                    int colNum = 1;
                    for(String field : datatype){
                        Cell cell = row.createCell(colNum++);
                        if (field instanceof String){
                            cell.setCellValue((String) field);
                        }
                    }
                }
                try{
                    FileOutputStream outputStream = new FileOutputStream(fileName);
                    workbook.write(outputStream);
                    workbook.close();

                } catch (FileNotFoundException ex) {
                    Logger.getLogger(DataDisplayScreen.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(DataDisplayScreen.class.getName()).log(Level.SEVERE, null, ex);
                }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void fileTypeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileTypeComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileTypeComboActionPerformed

    private void VariableXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VariableXActionPerformed
        if (isConnected)
        {
            LineChart_AWT( );
        }
    }//GEN-LAST:event_VariableXActionPerformed

    private void VariableYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VariableYActionPerformed
        if (isConnected)
        {
            LineChart_AWT( );
        }
    }//GEN-LAST:event_VariableYActionPerformed

    private void TempChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TempChoiceActionPerformed
       if (isConnected)
        {
            printTextField();
        }
    }//GEN-LAST:event_TempChoiceActionPerformed

    private void HumidityChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HumidityChoiceActionPerformed
       if (isConnected)
        {
            printTextField();
        }
    }//GEN-LAST:event_HumidityChoiceActionPerformed

    private void SoilPHChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SoilPHChoiceActionPerformed
       if (isConnected)
        {
            printTextField();
        }
    }//GEN-LAST:event_SoilPHChoiceActionPerformed

    private void WindChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WindChoiceActionPerformed
       if (isConnected)
        {
            printTextField();
        }
    }//GEN-LAST:event_WindChoiceActionPerformed

    
    
    
   
   
   public void LineChart_AWT( ) {
       
       String chartTitle = "Time Plot For selected variables";
      JFreeChart lineChart = ChartFactory.createLineChart(
         chartTitle,
         "Time","Values",
         createDataset());
         
        
            
           Jfreechartpanel.setLayout(new java.awt.BorderLayout());
            
            ChartPanel CP = new ChartPanel(lineChart);
            
            Jfreechartpanel.add(CP,BorderLayout.CENTER);
                    Jfreechartpanel.validate();
      
      
   }
   private DefaultCategoryDataset createDataset() {
       
       
      int VarX = VariableX.getSelectedIndex();
      int VarY = VariableY.getSelectedIndex();
      DefaultCategoryDataset line_chart_dataset = new DefaultCategoryDataset();
      
      
      if (VarX==0){
          
            if (VarY==0){
                    line_chart_dataset = ChopData(TempreatureData, TempreatureData);
                }
                if (VarY==1){
                    line_chart_dataset = ChopData(TempreatureData, HumidityData);
                }
                if (VarY==2){
                    line_chart_dataset = ChopData(TempreatureData, SoilPHData);
                }
                if (VarY==3){
                    line_chart_dataset = ChopData(TempreatureData, WindSpeedData);                    
            }
      }
      if (VarX==1){
          
            if (VarY==0){
                    line_chart_dataset = ChopData(HumidityData, TempreatureData);
                }
                if (VarY==1){
                    line_chart_dataset = ChopData(HumidityData, HumidityData);
                }
                if (VarY==2){
                    line_chart_dataset = ChopData(HumidityData, SoilPHData);
                }
                if (VarY==3){
                    line_chart_dataset = ChopData(HumidityData, WindSpeedData);                    
            }
      }           
      if (VarX==2){
          
            if (VarY==0){
                    line_chart_dataset = ChopData(SoilPHData, TempreatureData);
                }
                if (VarY==1){
                    line_chart_dataset = ChopData(SoilPHData, HumidityData);
                }
                if (VarY==2){
                    line_chart_dataset = ChopData(SoilPHData, SoilPHData);
                }
                if (VarY==3){
                    line_chart_dataset = ChopData(SoilPHData, WindSpeedData);                    
            }
      }                
      if (VarX==3){
          
            if (VarY==0){
                    line_chart_dataset = ChopData(WindSpeedData, TempreatureData);
                }
                if (VarY==1){
                    line_chart_dataset = ChopData(WindSpeedData, HumidityData);
                }
                if (VarY==2){
                    line_chart_dataset = ChopData(WindSpeedData, SoilPHData);
                }
                if (VarY==3){
                    line_chart_dataset = ChopData(WindSpeedData, WindSpeedData);                    
            }
      }     
      

      
    return line_chart_dataset;
   }
 
 
 private DefaultCategoryDataset ChopData(String VarX, String VarY) {

     DefaultCategoryDataset line_chart_dataset = new DefaultCategoryDataset();
     
     String[] InitialXdata;
     String[] InitialYdata;
     String[] Xdata;
     String[] Ydata;
     String[] TimeDisplayData;
     String VariableXName;
     String VariableYName;
     int Amount = 0;
     int Position;
     
     InitialXdata = VarX.split(":");
     InitialYdata = VarY.split(":");
     VariableXName = InitialXdata[0];
     VariableYName = InitialYdata[0];
     Xdata = InitialXdata[1].split(",");
     Ydata = InitialYdata[1].split(",");
     TimeDisplayData = TimeData.split(",");
     
     Position = Xdata.length-12;
     
     while (Amount<10)
     {
      line_chart_dataset.addValue( Integer.parseInt(Xdata[Position]), VariableXName , TimeDisplayData[Position] );

      Amount = Amount + 1;
      Position = Position +1;
              }
     Position = Xdata.length-12;
     Amount = 0;
     while (Amount<10)
     {

      line_chart_dataset.addValue( Integer.parseInt(Ydata[Position]), VariableYName , TimeDisplayData[Position] );
      Amount = Amount + 1;
      Position = Position +1;
              }
     return line_chart_dataset;
     
 }
 
 
     public void UpdateField(String StationsInField, String Position) {
         
             if (Position.equals("N"))
             {
                 NorthPosition.setText(StationsInField);
             }
             if (Position.equals("E"))
             {
                 EastPosition.setText(StationsInField);
             }
             if (Position.equals("S"))
             {
                 SouthPosition.setText(StationsInField);
             }
             if (Position.equals("W"))
             {
                 WestPosition.setText(StationsInField);
             }

           
         }
         

 public void Trends() {
        String[] Tdata,TTempdata,Hdata,HTempdata,Sdata,STempdata,Wdata,WTempdata;
        int Iterations;
        Tdata = TempreatureData.split(":");
       
        TTempdata = Tdata[1].split(",");
         Hdata = HumidityData.split(":");
        HTempdata = Hdata[1].split(",");
         Sdata = SoilPHData.split(":");
        STempdata = Sdata[1].split(",");
         Wdata = WindSpeedData.split(":");
        WTempdata = Wdata[1].split(",");
        Iterations = TTempdata.length - 4;     
        TempTrends.setText("Staying Stable...");
        TempTrends.setForeground(Color.BLACK);
        if (Integer.parseInt(TTempdata[Iterations])<Integer.parseInt(TTempdata[Iterations+1])&&Integer.parseInt(TTempdata[Iterations+1])<Integer.parseInt(TTempdata[Iterations+2])&&Integer.parseInt(TTempdata[Iterations+2])<Integer.parseInt(TTempdata[Iterations+3]))
        {
            TempTrends.setText("On the Rise...");
            TempTrends.setForeground(Color.GREEN);         
        }     
        if (Integer.parseInt(TTempdata[Iterations])>Integer.parseInt(TTempdata[Iterations+1])&&Integer.parseInt(TTempdata[Iterations+1])>Integer.parseInt(TTempdata[Iterations+2])&&Integer.parseInt(TTempdata[Iterations+2])>Integer.parseInt(TTempdata[Iterations+3]))
        {
            TempTrends.setText("Falling...");
            TempTrends.setForeground(Color.RED);         
        }  
        Iterations = HTempdata.length - 4;     
        HumidityTrends.setText("Staying Stable...");
        HumidityTrends.setForeground(Color.BLACK);
        if (Integer.parseInt(HTempdata[Iterations])<Integer.parseInt(HTempdata[Iterations+1])&&Integer.parseInt(HTempdata[Iterations+1])<Integer.parseInt(HTempdata[Iterations+2])&&Integer.parseInt(HTempdata[Iterations+2])<Integer.parseInt(HTempdata[Iterations+3]))
        {
            HumidityTrends.setText("On the Rise...");
            HumidityTrends.setForeground(Color.GREEN);         
        }     
        if (Integer.parseInt(HTempdata[Iterations])>Integer.parseInt(HTempdata[Iterations+1])&&Integer.parseInt(HTempdata[Iterations+1])>Integer.parseInt(HTempdata[Iterations+2])&&Integer.parseInt(HTempdata[Iterations+2])>Integer.parseInt(HTempdata[Iterations+3]))
        {
            HumidityTrends.setText("Falling...");
            HumidityTrends.setForeground(Color.RED);         
        }          
         Iterations = STempdata.length - 4;     
        SoilTrends.setText("Staying Stable...");
        SoilTrends.setForeground(Color.BLACK);
        if (Integer.parseInt(STempdata[Iterations])<Integer.parseInt(STempdata[Iterations+1])&&Integer.parseInt(STempdata[Iterations+1])<Integer.parseInt(STempdata[Iterations+2])&&Integer.parseInt(STempdata[Iterations+2])<Integer.parseInt(STempdata[Iterations+3]))
        {
            SoilTrends.setText("On the Rise...");
            SoilTrends.setForeground(Color.GREEN);         
        }     
        if (Integer.parseInt(STempdata[Iterations])>Integer.parseInt(STempdata[Iterations+1])&&Integer.parseInt(STempdata[Iterations+1])>Integer.parseInt(STempdata[Iterations+2])&&Integer.parseInt(STempdata[Iterations+2])>Integer.parseInt(STempdata[Iterations+3]))
        {
            SoilTrends.setText("Falling...");
            SoilTrends.setForeground(Color.RED);         
        }          
          Iterations = WTempdata.length - 4;     
        WindTrends.setText("Staying Stable...");
        WindTrends.setForeground(Color.BLACK);
        if (Integer.parseInt(WTempdata[Iterations])<Integer.parseInt(WTempdata[Iterations+1])&&Integer.parseInt(WTempdata[Iterations+1])<Integer.parseInt(WTempdata[Iterations+2])&&Integer.parseInt(WTempdata[Iterations+2])<Integer.parseInt(WTempdata[Iterations+3]))
        {
            WindTrends.setText("On the Rise...");
            WindTrends.setForeground(Color.GREEN);         
        }     
        if (Integer.parseInt(WTempdata[Iterations])>Integer.parseInt(WTempdata[Iterations+1])&&Integer.parseInt(WTempdata[Iterations+1])>Integer.parseInt(WTempdata[Iterations+2])&&Integer.parseInt(WTempdata[Iterations+2])>Integer.parseInt(WTempdata[Iterations+3]))
        {
            WindTrends.setText("Falling...");
            WindTrends.setForeground(Color.RED);         
        }                  
 }
    
 
    public void printTextField() {
        Trends();
        String[] Tdata,TTempdata,Hdata,HTempdata,Sdata,STempdata,Wdata,WTempdata;
        String TempreatureDataTemp, HumidityDataTemp, SoilPHDataTemp, WindSpeedDataTemp;
        String IterationsChoice = TempChoice.getItemAt(TempChoice.getSelectedIndex());
        String[] TimeDataTemp = TimeData.split(",");
        int Iterations = Integer.parseInt(IterationsChoice);
        Tdata = TempreatureData.split(":");
        TempreatureDataTemp =Tdata[0]+":";
        TTempdata = Tdata[1].split(",");
         Hdata = HumidityData.split(":");
        HumidityDataTemp =Hdata[0]+":"; 
        HTempdata = Hdata[1].split(",");
         Sdata = SoilPHData.split(":");
        SoilPHDataTemp =Sdata[0]+":"; 
        STempdata = Sdata[1].split(",");
         Wdata = WindSpeedData.split(":");
        WindSpeedDataTemp =Wdata[0]+":";   
        WTempdata = Wdata[1].split(",");
        Iterations = TTempdata.length - Iterations; 
        if (Iterations <0)
        {
            Iterations = 0;
        }
        while (Iterations < TTempdata.length)
        {
            TempreatureDataTemp = TempreatureDataTemp + TimeDataTemp[Iterations] + " : " +TTempdata[Iterations]+"'C" + " | ";
            
            Iterations = Iterations +1;
        }
        IterationsChoice = HumidityChoice.getItemAt(HumidityChoice.getSelectedIndex());
        Iterations = Integer.parseInt(IterationsChoice);
         Iterations = HTempdata.length - Iterations; 
        if (Iterations <0)
        {
            Iterations = 0;
        }
        while (Iterations < HTempdata.length)
        {
            HumidityDataTemp = HumidityDataTemp + TimeDataTemp[Iterations] + " : " +HTempdata[Iterations]+"%" + " | ";
            
            Iterations = Iterations +1;
        }       


        IterationsChoice = SoilPHChoice.getItemAt(SoilPHChoice.getSelectedIndex());
        Iterations = Integer.parseInt(IterationsChoice);
         Iterations = STempdata.length - Iterations; 
        if (Iterations <0)
        {
            Iterations = 0;
        }
        while (Iterations < STempdata.length)
        {
            SoilPHDataTemp = SoilPHDataTemp + TimeDataTemp[Iterations] + " : " +STempdata[Iterations]+"PH" + " | ";
            
            Iterations = Iterations +1;
        }       
        

        IterationsChoice = WindChoice.getItemAt(WindChoice.getSelectedIndex());
        Iterations = Integer.parseInt(IterationsChoice);
         Iterations = WTempdata.length - Iterations; 
        if (Iterations <0)
        {
            Iterations = 0;
        }
        while (Iterations < WTempdata.length)
        {
            WindSpeedDataTemp = WindSpeedDataTemp + TimeDataTemp[Iterations] + " : " +WTempdata[Iterations]+"Mph" + " | ";
            
            Iterations = Iterations +1;
        }       
                
        
        
     DisplayTempreatureData.setText(TempreatureDataTemp);
    DisplayHumidityData.setText(HumidityDataTemp);
    DisplaySoilPHData.setText(SoilPHDataTemp);
    DisplayWindSpeedData.setText(WindSpeedDataTemp);

    }
   public class IncomingReader implements Runnable
    {
        @Override
        public void run() 
        {
            String[] data,Tempdata;
            String stream, Done = "DataSending", Done1 ="StaticData",Done2 ="FieldData";
            String FieldName;

            try 
            {
                while ((stream = reader.readLine()) != null) 
                {
                     data = stream.split(";");
                     if (data[0].equals(Done)) 
                     {
                        TimeData = TimeData + data[1];
                        TempreatureData = TempreatureData +data[2];
                        HumidityData = HumidityData + data[3];
                        SoilPHData = SoilPHData + data[4];
                        WindSpeedData = WindSpeedData + data[5]; 
                        printTextField();
                        LineChart_AWT( );
                        
                     } 
                     else if (data[0].equals(Done1)) 
                     {
                        username = data[1];
                        ActiveStation.setText(username);
                         StaticData = data[2];
                         Nitrogen = data[3];
                         
                         Slider1.setValue(Integer.parseInt(Nitrogen));	
                        Slider1.setEnabled(false);
                        WeatherStationData.setText(StaticData);
                        Tempdata = data[2].split(",");
                        FieldName = Tempdata[2];
                        UpdateField(username,Tempdata[3]);
                        isConnected = true;  
                        writer.println("FieldRequest;"+FieldName);
                        writer.flush(); 
                                             
                     } 
                     else if (data[0].equals(Done2)) 
                     {
                         Tempdata = data[1].split(",");
                         UpdateField(Tempdata[0],Tempdata[1]);
                         
                     } 
                     else
                     {
                         System.out.println("No conditions met");
                     }
                     
                }
           }catch(IOException ex) { 
           System.out.println("Error reciving message from server");
           }
        }
    }
    
 

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DataDisplayScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DataDisplayScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DataDisplayScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DataDisplayScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DataDisplayScreen("WeatherStation1","10").setVisible(true);
          }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ActiveStation;
    private javax.swing.JTextArea DisplayHumidityData;
    private javax.swing.JTextArea DisplaySoilPHData;
    private javax.swing.JTextArea DisplayTempreatureData;
    private javax.swing.JTextArea DisplayWindSpeedData;
    private javax.swing.JButton East;
    private javax.swing.JTextField EastPosition;
    private javax.swing.JComboBox<String> HumidityChoice;
    private javax.swing.JTextArea HumidityTrends;
    private javax.swing.JPanel Jfreechartpanel;
    private javax.swing.JButton North;
    private javax.swing.JTextField NorthPosition;
    private javax.swing.JSlider Slider1;
    private javax.swing.JComboBox<String> SoilPHChoice;
    private javax.swing.JTextArea SoilTrends;
    private javax.swing.JButton South;
    private javax.swing.JTextField SouthPosition;
    private javax.swing.JComboBox<String> TempChoice;
    private javax.swing.JTextArea TempTrends;
    private javax.swing.JComboBox<String> VariableX;
    private javax.swing.JComboBox<String> VariableY;
    private javax.swing.JTextArea WeatherStationData;
    private javax.swing.JButton West;
    private javax.swing.JTextField WestPosition;
    private javax.swing.JComboBox<String> WindChoice;
    private javax.swing.JTextArea WindTrends;
    private javax.swing.JComboBox<String> fileTypeCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel saveLabel;
    private javax.swing.JTextField saveText;
    // End of variables declaration//GEN-END:variables
}
