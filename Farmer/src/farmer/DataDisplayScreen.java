/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package farmer;

import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;

//import org.apache.poi.ss.usermodel.*;
//import static javaserver.Server1.din;
import java.awt.BorderLayout;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;
import java.io.FileWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 *
 * @author Thoma
 */
public class DataDisplayScreen extends javax.swing.JFrame {
    
    int Instance = 0;
    String Choice = "";
    String username, address = "localhost";
    ArrayList<String> users = new ArrayList();
    int port = 2222;
    Boolean isConnected = false;
    String Nitrogen;
    String Farmer;
    Socket sock;
    BufferedReader reader;
    PrintWriter writer;
    String StaticData;
    String TimeData;
    String TempreatureData = "TempreatureData:";
    String HumidityData = "HumidityData:";
    String SoilPHData = "SoilPHData:";
    String WindSpeedData = "WindSpeedData:";  
    
 
    public void ListenThread() 
    {
         Thread IncomingReader = new Thread(new DataDisplayScreen.IncomingReader());
         IncomingReader.start();
    }
/**
 * 
     * Creates new form DataDisplayScreen
     */
    public DataDisplayScreen(String Station,String Name) {
        initComponents();
        try     
            {

                Farmer = Name;
                sock = new Socket(address, port);
                InputStreamReader streamreader = new InputStreamReader(sock.getInputStream());
                reader = new BufferedReader(streamreader);
                writer = new PrintWriter(sock.getOutputStream());
                writer.println("Connect;"+Farmer);
                writer.flush(); 
                writer.println("DataRequest;"+Station+";"+""+";"+Farmer);
                writer.flush();  
            } 
            catch (IOException ex) 
            {
                System.out.println("Cannot Connect! Try Again. \n");
            }
            
            ListenThread(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel25 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        VariableX = new javax.swing.JComboBox<>();
        VariableY = new javax.swing.JComboBox<>();
        Jfreechartpanel = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        ActiveStation = new javax.swing.JTextField();
        Slider1 = new javax.swing.JSlider();
        jLabel32 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        colourMode = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        WeatherStationData = new javax.swing.JTextField();
        DisplaySoilPHData = new javax.swing.JTextField();
        SoilTrends = new javax.swing.JTextField();
        DisplayWindSpeedData = new javax.swing.JTextField();
        WindTrends = new javax.swing.JTextField();
        DisplayHumidityData = new javax.swing.JTextField();
        HumidityTrends = new javax.swing.JTextField();
        DisplayTempreatureData = new javax.swing.JTextField();
        TempTrends = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        WestPosition = new javax.swing.JTextField();
        EastPosition = new javax.swing.JTextField();
        East = new javax.swing.JButton();
        West = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        SouthPosition = new javax.swing.JTextField();
        NorthPosition = new javax.swing.JTextField();
        North = new javax.swing.JButton();
        South = new javax.swing.JButton();
        saveLabel = new javax.swing.JLabel();
        saveText = new javax.swing.JTextField();
        fileTypeCombo = new javax.swing.JComboBox<>();
        saveButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jLabel25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/farmer/resources/Tempreature.png"))); // NOI18N

        jLabel1.setText("Tempreature Data:");

        jLabel28.setIcon(new javax.swing.ImageIcon(getClass().getResource("/farmer/resources/Humidity.png"))); // NOI18N

        jLabel2.setText("Humidity Data:");

        jLabel26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/farmer/resources/SoilPH.png"))); // NOI18N

        jLabel3.setText("SoilPH Data:");

        jLabel27.setIcon(new javax.swing.ImageIcon(getClass().getResource("/farmer/resources/WindSpeed.png"))); // NOI18N

        jLabel4.setText("Wind Speed Data:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Station information:");

        VariableX.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tempreature", "Humidity", "SoilPH", "WIndSpeed" }));
        VariableX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VariableXActionPerformed(evt);
            }
        });

        VariableY.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tempreature", "Humidity", "SoilPH", "WIndSpeed" }));
        VariableY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VariableYActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JfreechartpanelLayout = new javax.swing.GroupLayout(Jfreechartpanel);
        Jfreechartpanel.setLayout(JfreechartpanelLayout);
        JfreechartpanelLayout.setHorizontalGroup(
            JfreechartpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 801, Short.MAX_VALUE)
        );
        JfreechartpanelLayout.setVerticalGroup(
            JfreechartpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 416, Short.MAX_VALUE)
        );

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel16.setText("Active Station:");

        ActiveStation.setText("WeatherStation1");

        Slider1.setMajorTickSpacing(1);
        Slider1.setMaximum(4);
        Slider1.setOrientation(javax.swing.JSlider.VERTICAL);
        Slider1.setPaintTicks(true);
        Slider1.setSnapToTicks(true);
        Slider1.setToolTipText("");
        Slider1.setValue(2);

        jLabel32.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel32.setText("Nitrogen Levels:");

        jLabel29.setText("Surplus");

        jLabel30.setText("Depleted");

        jLabel31.setText("Normal");

        jLabel33.setText("High");

        jLabel34.setText("Low");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel11.setText("VariableX:");

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel12.setText("VariableY:");

        colourMode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Light Mode", "Night Mode", "Grey Mode" }));
        colourMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colourModeActionPerformed(evt);
            }
        });

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/farmer/resources/Compass.png"))); // NOI18N

        WeatherStationData.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        DisplaySoilPHData.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        SoilTrends.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        SoilTrends.setText("Staying Stable...");

        DisplayWindSpeedData.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        WindTrends.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        WindTrends.setText("Staying Stable...");

        DisplayHumidityData.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        HumidityTrends.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        HumidityTrends.setText("Staying Stable...");

        DisplayTempreatureData.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        TempTrends.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        TempTrends.setText("Staying Stable...");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Stations in field:");

        jLabel7.setText("West:");

        WestPosition.setText("No Connected Station");
        WestPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WestPositionActionPerformed(evt);
            }
        });

        EastPosition.setText("No Connected Station");
        EastPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EastPositionActionPerformed(evt);
            }
        });

        East.setText("Connect");
        East.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EastActionPerformed(evt);
            }
        });

        West.setText("Connect");
        West.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WestActionPerformed(evt);
            }
        });

        jLabel8.setText("South:");

        SouthPosition.setText("No Connected Station");
        SouthPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SouthPositionActionPerformed(evt);
            }
        });

        NorthPosition.setText("No Connected Station");
        NorthPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NorthPositionActionPerformed(evt);
            }
        });

        North.setText("Connect");
        North.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NorthActionPerformed(evt);
            }
        });

        South.setText("Connect");
        South.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SouthActionPerformed(evt);
            }
        });

        saveLabel.setText("Filename:");

        fileTypeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Text", "Excel" }));
        fileTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileTypeComboActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        jLabel9.setText("East:");

        jLabel10.setText("North:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel25)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel27)
                                    .addComponent(jLabel26))
                                .addGap(35, 35, 35)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(TempTrends, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(DisplayHumidityData, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(HumidityTrends, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DisplaySoilPHData, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SoilTrends, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(DisplayTempreatureData, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(WindTrends, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(DisplayWindSpeedData, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(121, 121, 121)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(497, 497, 497)
                                .addComponent(jLabel32))
                            .addComponent(jLabel5)
                            .addComponent(WeatherStationData))
                        .addGap(53, 53, 53)
                        .addComponent(Slider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel30)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel31)
                                .addComponent(jLabel29))
                            .addComponent(jLabel33)
                            .addComponent(jLabel34)))
                    .addComponent(Jfreechartpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(744, 744, 744))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel28)
                    .addComponent(jLabel6))
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(WestPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(West))
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SouthPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(South))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(EastPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(East))
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(NorthPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(North)))))
                .addGap(32, 32, 32)
                .addComponent(jLabel15)
                .addGap(124, 124, 124)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(saveLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(saveText, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fileTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(VariableX, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(98, 98, 98)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(VariableY, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addGap(76, 76, 76)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ActiveStation, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(88, 88, 88)
                                .addComponent(colourMode, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel16))))
                .addGap(661, 661, 661))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jLabel16))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel11)
                                .addComponent(jLabel12))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ActiveStation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(VariableY, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(VariableX, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(colourMode, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(saveText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fileTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(saveButton)
                            .addComponent(saveLabel)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel8)
                                .addComponent(jLabel7)
                                .addComponent(jLabel6))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(WestPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(West)
                                .addComponent(SouthPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(South))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel10)
                                .addComponent(jLabel9))
                            .addGap(2, 2, 2)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(EastPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(East)
                                .addComponent(NorthPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(North))
                            .addGap(3, 3, 3))
                        .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Jfreechartpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(99, 99, 99)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel32)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(WeatherStationData, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel29)
                                    .addGap(30, 30, 30)
                                    .addComponent(jLabel33)
                                    .addGap(29, 29, 29)
                                    .addComponent(jLabel31)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel34)
                                    .addGap(30, 30, 30)
                                    .addComponent(jLabel30))
                                .addComponent(Slider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TempTrends, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(DisplayTempreatureData, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(HumidityTrends, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(DisplayHumidityData, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(69, 69, 69)
                                .addComponent(jLabel28)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SoilTrends, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(DisplaySoilPHData, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(WindTrends, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(DisplayWindSpeedData, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel27))
                        .addGap(0, 68, Short.MAX_VALUE))))
        );

        getAccessibleContext().setAccessibleName("jFrame1");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void WestPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WestPositionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_WestPositionActionPerformed

    private void SouthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SouthActionPerformed
         String temp;
        temp = SouthPosition.getText();
        if (temp.equals("No Connected Station"))
        {
            System.out.println("No Station Avaliable");
        }  
        else
        {
            writer.println("ChangeActive;"+username+";"+temp+";"+""+";"+Farmer);
            writer.flush();           
        }       // TODO add your handling code here:
    }//GEN-LAST:event_SouthActionPerformed

    private void NorthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NorthActionPerformed
        String temp;
        temp = NorthPosition.getText();
        if (temp.equals("No Connected Station"))
        {
            System.out.println("No Station Avaliable");
        }  
        else
        {
            writer.println("ChangeActive;"+username+";"+temp+";"+""+";"+Farmer);
            writer.flush();           
        }       // TODO add your handling code here:
    }//GEN-LAST:event_NorthActionPerformed

    private void NorthPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NorthPositionActionPerformed

    }//GEN-LAST:event_NorthPositionActionPerformed

    private void SouthPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SouthPositionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SouthPositionActionPerformed

    private void WestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WestActionPerformed
        String temp;
        temp = WestPosition.getText();
        if (temp.equals("No Connected Station"))
        {
            System.out.println("No Station Avaliable");
        }  
        else
        {
            writer.println("ChangeActive;"+username+";"+temp+";"+""+";"+Farmer);
            writer.flush();           
        }      // TODO add your handling code here:
    }//GEN-LAST:event_WestActionPerformed

    private void EastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EastActionPerformed
        String temp;
        temp = EastPosition.getText();
        if (temp.equals("No Connected Station"))
        {
            System.out.println("No Station Avaliable");
        }  
        else
        {
            writer.println("ChangeActive;"+username+";"+temp+";"+""+";"+Farmer);
            writer.flush();           
        }
// TODO add your handling code here:
    }//GEN-LAST:event_EastActionPerformed

    private void EastPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EastPositionActionPerformed

    }//GEN-LAST:event_EastPositionActionPerformed
    private void saveText(){
                    String fileName = saveText.getText()+".txt";
            try{
                FileWriter fout = new FileWriter(fileName,true);
                BufferedWriter x = new BufferedWriter(fout);
                PrintWriter pout = new PrintWriter(x);
                pout.println(username);
                pout.println(StaticData);
                pout.println(TimeData);
                pout.println(TempreatureData);
                pout.println(HumidityData);
                pout.println(SoilPHData);
                pout.println(WindSpeedData);
                pout.close();
                x.close();
                fout.close();

            }catch(IOException e){

            }
    }
    private void saveExcel(){
        String ITrickedyou;
        // Save file to Excel
        String name = saveText.getText();//+".xlsx";
        System.out.println(name);
        String fileName = name + ".xlsx";
        XSSFWorkbook workbook = new XSSFWorkbook();
        String Names = "Username:,"+username;
        String Static1 = "Static Data:,"+StaticData;
        XSSFSheet sheet  = workbook.createSheet("fileName");
        String[] Name = Names.split(",");
        String[] Static = Static1.split(",");
        ITrickedyou = "TimeData:" + TimeData;

        String[] Humidity = HumidityData.split(",");

        int index = Humidity[0].indexOf(":");
        Humidity[0] = Humidity[0].substring(0,index);

        String[] Time = ITrickedyou.split(",");

        index = Time[0].indexOf(":");
        Time[0] = Time[0].substring(0,index);
        String[] Temperature = TempreatureData.split(",");


        index = Temperature[0].indexOf(":");
        Temperature[0] = Temperature[0].substring(0,index);


        String[] soilPH = SoilPHData.split(",");
        index = soilPH[0].indexOf(":");
        soilPH[0] = soilPH[0].substring(0,index);


        String[] windSpeed = WindSpeedData.split(",");
        index = windSpeed[0].indexOf(":");
        windSpeed[0] = windSpeed[0].substring(0,index);


        ArrayList<String[]> dataArr = new ArrayList<>();
        dataArr.add(Name);
        dataArr.add(Static);
        dataArr.add(Time);
        dataArr.add(Temperature);
        dataArr.add(Humidity);
        dataArr.add(soilPH);
        dataArr.add(windSpeed);

        int rowNum = 0;
        System.out.println("Creating Excel Spreadsheet");

        // Writing data
        rowNum = 0;
        for(String[] datatype : dataArr){
            Row row = sheet.createRow(rowNum++);
            int colNum = 1;
            for(String field : datatype){
                Cell cell = row.createCell(colNum++);
                if (field instanceof String){
                    cell.setCellValue((String) field);
                }
            }
        }
        try{
            FileOutputStream outputStream = new FileOutputStream(fileName);
            workbook.write(outputStream);
            workbook.close();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(DataDisplayScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DataDisplayScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        
        if("Text".equals(fileTypeCombo.getSelectedItem().toString())){
            saveText();

        }else{
            saveExcel();           
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void fileTypeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileTypeComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileTypeComboActionPerformed

    private void VariableXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VariableXActionPerformed
        if (isConnected)
        {
            LineChart_AWT( );
        }
    }//GEN-LAST:event_VariableXActionPerformed

    private void VariableYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VariableYActionPerformed
        if (isConnected)
        {
            LineChart_AWT( );
        }
    }//GEN-LAST:event_VariableYActionPerformed

    private void colourModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colourModeActionPerformed
        // TODO add your handling code here:
        if("Light Mode".equals(colourMode.getSelectedItem().toString())){
            // background to light
            //jFrame.setBackground(Color.WHITE);
            getContentPane().setBackground(Color.WHITE);
            ActiveStation.setBackground(Color.WHITE);
            ActiveStation.setForeground(Color.BLACK);
            DisplayHumidityData.setBackground(Color.WHITE);
            DisplayHumidityData.setForeground(Color.BLACK);
            DisplayTempreatureData.setBackground(Color.WHITE);
            DisplayTempreatureData.setForeground(Color.BLACK);
            DisplaySoilPHData.setBackground(Color.WHITE);
            DisplaySoilPHData.setForeground(Color.BLACK);
            DisplaySoilPHData.setBackground(Color.WHITE);
            DisplaySoilPHData.setForeground(Color.BLACK);
            East.setBackground(Color.WHITE);
            East.setForeground(Color.BLACK);
            EastPosition.setBackground(Color.WHITE);
            EastPosition.setForeground(Color.BLACK);

            HumidityTrends.setBackground(Color.WHITE);
            HumidityTrends.setForeground(Color.BLACK);            
            Jfreechartpanel.setBackground(Color.WHITE);
            Jfreechartpanel.setForeground(Color.BLACK);
            North.setBackground(Color.WHITE);
            North.setForeground(Color.BLACK);
            NorthPosition.setBackground(Color.WHITE);
            NorthPosition.setForeground(Color.BLACK);
            Slider1.setBackground(Color.WHITE);
            Slider1.setForeground(Color.BLACK);
            DisplayWindSpeedData.setBackground(Color.WHITE);
            DisplayWindSpeedData.setForeground(Color.BLACK);

            SoilTrends.setBackground(Color.WHITE);
            SoilTrends.setForeground(Color.BLACK);
            South.setBackground(Color.WHITE);
            South.setForeground(Color.BLACK);
            SouthPosition.setBackground(Color.WHITE);
            SouthPosition.setForeground(Color.BLACK);

            TempTrends.setBackground(Color.WHITE);
            TempTrends.setForeground(Color.BLACK);
            VariableX.setBackground(Color.WHITE);
            VariableX.setForeground(Color.BLACK);
            VariableY.setBackground(Color.WHITE);
            VariableY.setForeground(Color.BLACK);
            WeatherStationData.setBackground(Color.WHITE);
            WeatherStationData.setForeground(Color.BLACK);
            West.setBackground(Color.WHITE);
            West.setForeground(Color.BLACK);
            WestPosition.setBackground(Color.WHITE);
            WestPosition.setForeground(Color.BLACK);

            SoilTrends.setBackground(Color.WHITE);
            SoilTrends.setForeground(Color.BLACK);
            colourMode.setBackground(Color.WHITE);
            colourMode.setForeground(Color.BLACK);  
            fileTypeCombo.setBackground(Color.WHITE);
            fileTypeCombo.setForeground(Color.BLACK); 
            jLabel1.setBackground(Color.WHITE);
            jLabel1.setForeground(Color.BLACK);
            jLabel10.setBackground(Color.WHITE);
            jLabel10.setForeground(Color.BLACK);
            jLabel11.setBackground(Color.WHITE);
            jLabel11.setForeground(Color.BLACK);
            jLabel12.setBackground(Color.WHITE);
            jLabel12.setForeground(Color.BLACK);
            jLabel15.setBackground(Color.WHITE);
            jLabel15.setForeground(Color.BLACK);
            jLabel6.setBackground(Color.WHITE);
            jLabel6.setForeground(Color.BLACK);
            jLabel7.setBackground(Color.WHITE);
            jLabel7.setForeground(Color.BLACK);
            jLabel8.setBackground(Color.WHITE);
            jLabel8.setForeground(Color.BLACK);
            jLabel9.setBackground(Color.WHITE);
            jLabel9.setForeground(Color.BLACK);
            jLabel2.setBackground(Color.WHITE);
            jLabel2.setForeground(Color.BLACK);

            jLabel25.setBackground(Color.WHITE);
            jLabel25.setForeground(Color.BLACK);
            jLabel26.setBackground(Color.WHITE);
            jLabel26.setForeground(Color.BLACK);
            jLabel27.setBackground(Color.WHITE);
            jLabel27.setForeground(Color.BLACK);
            jLabel28.setBackground(Color.WHITE);
            jLabel28.setForeground(Color.BLACK);
            jLabel29.setBackground(Color.WHITE);
            jLabel29.setForeground(Color.BLACK);
            jLabel3.setBackground(Color.WHITE);
            jLabel3.setForeground(Color.BLACK);
            jLabel30.setBackground(Color.WHITE);
            jLabel30.setForeground(Color.BLACK);
            jLabel31.setBackground(Color.WHITE);
            jLabel31.setForeground(Color.BLACK);
            jLabel32.setBackground(Color.WHITE);
            jLabel32.setForeground(Color.BLACK);
            jLabel33.setBackground(Color.WHITE);
            jLabel33.setForeground(Color.BLACK);
            jLabel34.setBackground(Color.WHITE);
            jLabel34.setForeground(Color.BLACK);
            jLabel4.setBackground(Color.WHITE);
            jLabel4.setForeground(Color.BLACK);
            jLabel5.setBackground(Color.WHITE);
            jLabel5.setForeground(Color.BLACK);
            jLabel6.setBackground(Color.WHITE);
            jLabel6.setForeground(Color.BLACK);
            jLabel7.setBackground(Color.WHITE);
            jLabel7.setForeground(Color.BLACK);
            jLabel8.setBackground(Color.WHITE);
            jLabel8.setForeground(Color.BLACK);
            jLabel9.setBackground(Color.WHITE);
            jLabel9.setForeground(Color.BLACK);
            jLabel1.setBackground(Color.WHITE);
            jLabel1.setForeground(Color.BLACK);
            jLabel2.setBackground(Color.WHITE);
            jLabel2.setForeground(Color.BLACK);

            saveButton.setBackground(Color.WHITE);
            saveButton.setForeground(Color.BLACK);
            saveLabel.setBackground(Color.WHITE);
            saveLabel.setForeground(Color.BLACK);
            saveText.setBackground(Color.WHITE);
            saveText.setForeground(Color.BLACK);
            WindTrends.setBackground(Color.WHITE);
            WindTrends.setForeground(Color.BLACK);
            
        }else if("Grey Mode".equals(colourMode.getSelectedItem().toString())){
            getContentPane().setBackground(Color.gray);
                        ActiveStation.setBackground(Color.WHITE);
            ActiveStation.setForeground(Color.gray);
            DisplayHumidityData.setBackground(Color.WHITE);
            DisplayHumidityData.setForeground(Color.gray);
            DisplayTempreatureData.setBackground(Color.WHITE);
            DisplayTempreatureData.setForeground(Color.gray);
            DisplaySoilPHData.setBackground(Color.WHITE);
            DisplaySoilPHData.setForeground(Color.gray);
            DisplaySoilPHData.setBackground(Color.WHITE);
            DisplaySoilPHData.setForeground(Color.gray);
            East.setBackground(Color.WHITE);
            East.setForeground(Color.gray);
            EastPosition.setBackground(Color.WHITE);
            EastPosition.setForeground(Color.gray);

            HumidityTrends.setBackground(Color.WHITE);
            HumidityTrends.setForeground(Color.gray);            
            Jfreechartpanel.setBackground(Color.WHITE);
            Jfreechartpanel.setForeground(Color.gray);
            North.setBackground(Color.WHITE);
            North.setForeground(Color.gray);
            NorthPosition.setBackground(Color.WHITE);
            NorthPosition.setForeground(Color.gray);
            Slider1.setBackground(Color.WHITE);
            Slider1.setForeground(Color.gray);
            DisplayWindSpeedData.setBackground(Color.WHITE);
            DisplayWindSpeedData.setForeground(Color.gray);
            SoilTrends.setBackground(Color.WHITE);
            SoilTrends.setForeground(Color.gray);
            South.setBackground(Color.WHITE);
            South.setForeground(Color.gray);
            SouthPosition.setBackground(Color.WHITE);
            SouthPosition.setForeground(Color.gray);

            TempTrends.setBackground(Color.WHITE);
            TempTrends.setForeground(Color.gray);
            VariableX.setBackground(Color.WHITE);
            VariableX.setForeground(Color.gray);
            VariableY.setBackground(Color.WHITE);
            VariableY.setForeground(Color.gray);
            WeatherStationData.setBackground(Color.WHITE);
            WeatherStationData.setForeground(Color.gray);
            West.setBackground(Color.WHITE);
            West.setForeground(Color.gray);
            WestPosition.setBackground(Color.WHITE);
            WestPosition.setForeground(Color.gray);
            jLabel29.setForeground(Color.WHITE);
            jLabel29.setBackground(Color.BLACK);
            jLabel30.setBackground(Color.BLACK);
            jLabel30.setForeground(Color.WHITE);
            jLabel31.setBackground(Color.BLACK);
            jLabel31.setForeground(Color.WHITE);
            jLabel32.setBackground(Color.BLACK);
            jLabel32.setForeground(Color.WHITE);
            jLabel33.setBackground(Color.BLACK);
            jLabel33.setForeground(Color.WHITE);
            jLabel34.setBackground(Color.BLACK);
            jLabel34.setForeground(Color.WHITE);
            SoilTrends.setBackground(Color.WHITE);
            SoilTrends.setForeground(Color.gray);
            colourMode.setBackground(Color.WHITE);
            colourMode.setForeground(Color.gray);  
            fileTypeCombo.setBackground(Color.WHITE);
            fileTypeCombo.setForeground(Color.gray); 
            jLabel1.setBackground(Color.WHITE);
            jLabel1.setForeground(Color.gray);
            jLabel10.setBackground(Color.WHITE);
            jLabel10.setForeground(Color.gray);
            jLabel11.setBackground(Color.WHITE);
            jLabel11.setForeground(Color.gray);
            jLabel12.setBackground(Color.WHITE);
            jLabel12.setForeground(Color.gray);
            jLabel15.setBackground(Color.WHITE);
            jLabel15.setForeground(Color.gray);
            jLabel6.setBackground(Color.WHITE);
            jLabel6.setForeground(Color.gray);
            jLabel7.setBackground(Color.WHITE);
            jLabel7.setForeground(Color.gray);
            jLabel8.setBackground(Color.WHITE);
            jLabel8.setForeground(Color.gray);
            jLabel9.setBackground(Color.WHITE);
            jLabel9.setForeground(Color.gray);
            jLabel2.setBackground(Color.WHITE);
            jLabel2.setForeground(Color.gray);

            jLabel25.setBackground(Color.WHITE);
            jLabel25.setForeground(Color.gray);
            jLabel26.setBackground(Color.WHITE);
            jLabel26.setForeground(Color.gray);
            jLabel27.setBackground(Color.WHITE);
            jLabel27.setForeground(Color.gray);
            jLabel28.setBackground(Color.WHITE);
            jLabel28.setForeground(Color.gray);
            jLabel29.setBackground(Color.WHITE);
            jLabel29.setForeground(Color.gray);
            jLabel3.setBackground(Color.WHITE);
            jLabel3.setForeground(Color.gray);
            jLabel30.setBackground(Color.WHITE);
            jLabel30.setForeground(Color.gray);
            jLabel31.setBackground(Color.WHITE);
            jLabel31.setForeground(Color.gray);
            jLabel32.setBackground(Color.WHITE);
            jLabel32.setForeground(Color.gray);
            jLabel33.setBackground(Color.WHITE);
            jLabel33.setForeground(Color.gray);
            jLabel34.setBackground(Color.WHITE);
            jLabel34.setForeground(Color.gray);
            jLabel4.setBackground(Color.WHITE);
            jLabel4.setForeground(Color.gray);
            jLabel5.setBackground(Color.WHITE);
            jLabel5.setForeground(Color.gray);
            jLabel6.setBackground(Color.WHITE);
            jLabel6.setForeground(Color.gray);
            jLabel7.setBackground(Color.WHITE);
            jLabel7.setForeground(Color.gray);
            jLabel8.setBackground(Color.WHITE);
            jLabel8.setForeground(Color.gray);
            jLabel9.setBackground(Color.WHITE);
            jLabel9.setForeground(Color.gray);
            jLabel1.setBackground(Color.WHITE);
            jLabel1.setForeground(Color.gray);
            jLabel2.setBackground(Color.WHITE);
            jLabel2.setForeground(Color.gray);

            saveButton.setBackground(Color.WHITE);
            saveButton.setForeground(Color.gray);
            saveLabel.setBackground(Color.WHITE);
            saveLabel.setForeground(Color.gray);
            saveText.setBackground(Color.WHITE);
            saveText.setForeground(Color.gray);
            WindTrends.setBackground(Color.WHITE);
            WindTrends.setForeground(Color.gray);
        }else{
            // Set it to dark
            getContentPane().setBackground(Color.BLACK);
            ActiveStation.setBackground(Color.BLACK);
            ActiveStation.setForeground(Color.WHITE);
            DisplayHumidityData.setBackground(Color.BLACK);
            DisplayHumidityData.setForeground(Color.WHITE);
            DisplayTempreatureData.setBackground(Color.BLACK);
            DisplayTempreatureData.setForeground(Color.WHITE);
            DisplaySoilPHData.setBackground(Color.BLACK);
            DisplaySoilPHData.setForeground(Color.WHITE);
            DisplaySoilPHData.setBackground(Color.BLACK);
            DisplaySoilPHData.setForeground(Color.WHITE);
            East.setBackground(Color.BLACK);
            East.setForeground(Color.WHITE);
            EastPosition.setBackground(Color.BLACK);
            EastPosition.setForeground(Color.WHITE);

            HumidityTrends.setBackground(Color.BLACK);
            HumidityTrends.setForeground(Color.WHITE);            
            Jfreechartpanel.setBackground(Color.BLACK);
            Jfreechartpanel.setForeground(Color.WHITE);
            North.setBackground(Color.BLACK);
            North.setForeground(Color.WHITE);
            NorthPosition.setBackground(Color.BLACK);
            NorthPosition.setForeground(Color.WHITE);
            Slider1.setBackground(Color.BLACK);
            Slider1.setForeground(Color.WHITE);
            jLabel1.setBackground(Color.BLACK);
            jLabel1.setForeground(Color.WHITE);
            DisplayWindSpeedData.setBackground(Color.BLACK);
            DisplayWindSpeedData.setForeground(Color.WHITE);      
            WindTrends.setBackground(Color.BLACK);
            WindTrends.setForeground(Color.WHITE);
            SoilTrends.setBackground(Color.BLACK);
            SoilTrends.setForeground(Color.WHITE);
            South.setBackground(Color.BLACK);
            South.setForeground(Color.WHITE);
            SouthPosition.setBackground(Color.BLACK);
            SouthPosition.setForeground(Color.WHITE);

            TempTrends.setBackground(Color.BLACK);
            TempTrends.setForeground(Color.WHITE);
            VariableX.setBackground(Color.BLACK);
            VariableX.setForeground(Color.WHITE);
            VariableY.setBackground(Color.BLACK);
            VariableY.setForeground(Color.WHITE);
            WeatherStationData.setBackground(Color.BLACK);
            WeatherStationData.setForeground(Color.WHITE);
            West.setBackground(Color.BLACK);
            West.setForeground(Color.WHITE);
            WestPosition.setBackground(Color.BLACK);
            WestPosition.setForeground(Color.WHITE);

            SoilTrends.setBackground(Color.BLACK);
            SoilTrends.setForeground(Color.WHITE);
            colourMode.setBackground(Color.BLACK);
            colourMode.setForeground(Color.WHITE);  
            fileTypeCombo.setBackground(Color.BLACK);
            fileTypeCombo.setForeground(Color.WHITE); 
            jLabel1.setBackground(Color.BLACK);
            jLabel1.setForeground(Color.WHITE);
            jLabel10.setBackground(Color.BLACK);
            jLabel10.setForeground(Color.WHITE);
            jLabel11.setBackground(Color.BLACK);
            jLabel11.setForeground(Color.WHITE);
            jLabel12.setBackground(Color.BLACK);
            jLabel12.setForeground(Color.WHITE);
            jLabel15.setBackground(Color.BLACK);
            jLabel15.setForeground(Color.WHITE);
            jLabel6.setBackground(Color.BLACK);
            jLabel6.setForeground(Color.WHITE);
            jLabel7.setBackground(Color.BLACK);
            jLabel7.setForeground(Color.WHITE);
            jLabel8.setBackground(Color.BLACK);
            jLabel8.setForeground(Color.WHITE);
            jLabel9.setBackground(Color.BLACK);
            jLabel9.setForeground(Color.WHITE);
            jLabel2.setBackground(Color.BLACK);
            jLabel2.setForeground(Color.WHITE);

            jLabel25.setBackground(Color.BLACK);
            jLabel25.setForeground(Color.WHITE);
            jLabel26.setBackground(Color.BLACK);
            jLabel26.setForeground(Color.WHITE);
            jLabel27.setBackground(Color.BLACK);
            jLabel27.setForeground(Color.WHITE);
            jLabel28.setBackground(Color.BLACK);
            jLabel28.setForeground(Color.WHITE);
            jLabel29.setBackground(Color.BLACK);
            jLabel29.setForeground(Color.WHITE);
            jLabel3.setBackground(Color.BLACK);
            jLabel3.setForeground(Color.WHITE);
            jLabel30.setBackground(Color.BLACK);
            jLabel30.setForeground(Color.WHITE);
            jLabel31.setBackground(Color.BLACK);
            jLabel31.setForeground(Color.WHITE);
            jLabel32.setBackground(Color.BLACK);
            jLabel32.setForeground(Color.WHITE);
            jLabel33.setBackground(Color.BLACK);
            jLabel33.setForeground(Color.WHITE);
            jLabel34.setBackground(Color.BLACK);
            jLabel34.setForeground(Color.WHITE);
            jLabel4.setBackground(Color.BLACK);
            jLabel4.setForeground(Color.WHITE);
            jLabel5.setBackground(Color.BLACK);
            jLabel5.setForeground(Color.WHITE);
            jLabel6.setBackground(Color.BLACK);
            jLabel6.setForeground(Color.WHITE);
            jLabel7.setBackground(Color.BLACK);
            jLabel7.setForeground(Color.WHITE);
            jLabel8.setBackground(Color.BLACK);
            jLabel8.setForeground(Color.WHITE);
            jLabel9.setBackground(Color.BLACK);
            jLabel9.setForeground(Color.WHITE);
            jLabel1.setBackground(Color.BLACK);
            jLabel1.setForeground(Color.WHITE);
            jLabel2.setBackground(Color.BLACK);
            jLabel2.setForeground(Color.WHITE);

            saveButton.setBackground(Color.BLACK);
            saveButton.setForeground(Color.WHITE);
            saveLabel.setBackground(Color.BLACK);
            saveLabel.setForeground(Color.WHITE);
            saveText.setBackground(Color.BLACK);
            saveText.setForeground(Color.WHITE);
        }
    }//GEN-LAST:event_colourModeActionPerformed

    
    
    
   
   
   public void LineChart_AWT( ) {
       
       String chartTitle = "Time Plot For selected variables";
      JFreeChart lineChart = ChartFactory.createLineChart(
         chartTitle,
         "Time","Values",
         createDataset());
         
        
            
           Jfreechartpanel.setLayout(new java.awt.BorderLayout());
            
            ChartPanel CP = new ChartPanel(lineChart);
            
            Jfreechartpanel.add(CP,BorderLayout.CENTER);
                    Jfreechartpanel.validate();
      
      
   }
   private DefaultCategoryDataset createDataset() {
       
       
      int VarX = VariableX.getSelectedIndex();
      int VarY = VariableY.getSelectedIndex();
      DefaultCategoryDataset line_chart_dataset = new DefaultCategoryDataset();
      
      
      if (VarX==0){
          
            if (VarY==0){
                    line_chart_dataset = ChopData(TempreatureData, TempreatureData);
                }
                if (VarY==1){
                    line_chart_dataset = ChopData(TempreatureData, HumidityData);
                }
                if (VarY==2){
                    line_chart_dataset = ChopData(TempreatureData, SoilPHData);
                }
                if (VarY==3){
                    line_chart_dataset = ChopData(TempreatureData, WindSpeedData);                    
            }
      }
      if (VarX==1){
          
            if (VarY==0){
                    line_chart_dataset = ChopData(HumidityData, TempreatureData);
                }
                if (VarY==1){
                    line_chart_dataset = ChopData(HumidityData, HumidityData);
                }
                if (VarY==2){
                    line_chart_dataset = ChopData(HumidityData, SoilPHData);
                }
                if (VarY==3){
                    line_chart_dataset = ChopData(HumidityData, WindSpeedData);                    
            }
      }           
      if (VarX==2){
          
            if (VarY==0){
                    line_chart_dataset = ChopData(SoilPHData, TempreatureData);
                }
                if (VarY==1){
                    line_chart_dataset = ChopData(SoilPHData, HumidityData);
                }
                if (VarY==2){
                    line_chart_dataset = ChopData(SoilPHData, SoilPHData);
                }
                if (VarY==3){
                    line_chart_dataset = ChopData(SoilPHData, WindSpeedData);                    
            }
      }                
      if (VarX==3){
          
            if (VarY==0){
                    line_chart_dataset = ChopData(WindSpeedData, TempreatureData);
                }
                if (VarY==1){
                    line_chart_dataset = ChopData(WindSpeedData, HumidityData);
                }
                if (VarY==2){
                    line_chart_dataset = ChopData(WindSpeedData, SoilPHData);
                }
                if (VarY==3){
                    line_chart_dataset = ChopData(WindSpeedData, WindSpeedData);                    
            }
      }     
      

      
    return line_chart_dataset;
   }
 
 
 private DefaultCategoryDataset ChopData(String VarX, String VarY) {

     DefaultCategoryDataset line_chart_dataset = new DefaultCategoryDataset();
     
     String[] InitialXdata;
     String[] InitialYdata;
     String[] Xdata;
     String[] Ydata;
     String[] TimeDisplayData;
     String VariableXName;
     String VariableYName;
     int Amount = 0;
     int Position;
     
     InitialXdata = VarX.split(":");
     InitialYdata = VarY.split(":");
     VariableXName = InitialXdata[0];
     VariableYName = InitialYdata[0];
     Xdata = InitialXdata[1].split(",");
     Ydata = InitialYdata[1].split(",");
     TimeDisplayData = TimeData.split(",");
     
     Position = Xdata.length-12;
     
     while (Amount<10)
     {
      line_chart_dataset.addValue( Integer.parseInt(Xdata[Position]), VariableXName , TimeDisplayData[Position] );

      Amount = Amount + 1;
      Position = Position +1;
              }
     Position = Xdata.length-12;
     Amount = 0;
     while (Amount<10)
     {

      line_chart_dataset.addValue( Integer.parseInt(Ydata[Position]), VariableYName , TimeDisplayData[Position] );
      Amount = Amount + 1;
      Position = Position +1;
              }
     return line_chart_dataset;
     
 }
 
 
     public void UpdateField(String StationsInField, String Position) {
         
             if (Position.equals("N"))
             {
                 NorthPosition.setText(StationsInField);
             }
             if (Position.equals("E"))
             {
                 EastPosition.setText(StationsInField);
             }
             if (Position.equals("S"))
             {
                 SouthPosition.setText(StationsInField);
             }
             if (Position.equals("W"))
             {
                 WestPosition.setText(StationsInField);
             }

           
         }
         

 public void Trends() {
        String[] Tdata,TTempdata,Hdata,HTempdata,Sdata,STempdata,Wdata,WTempdata;
        int Iterations;
        Tdata = TempreatureData.split(":");
       
        TTempdata = Tdata[1].split(",");
         Hdata = HumidityData.split(":");
        HTempdata = Hdata[1].split(",");
         Sdata = SoilPHData.split(":");
        STempdata = Sdata[1].split(",");
         Wdata = WindSpeedData.split(":");
        WTempdata = Wdata[1].split(",");
        Iterations = TTempdata.length - 4;     
        TempTrends.setText("Staying Stable...");
        TempTrends.setForeground(Color.BLACK);
        if (Integer.parseInt(TTempdata[Iterations])<Integer.parseInt(TTempdata[Iterations+1])&&Integer.parseInt(TTempdata[Iterations+1])<Integer.parseInt(TTempdata[Iterations+2])&&Integer.parseInt(TTempdata[Iterations+2])<Integer.parseInt(TTempdata[Iterations+3]))
        {
            TempTrends.setText("On the Rise...");
            TempTrends.setForeground(Color.GREEN);         
        }     
        if (Integer.parseInt(TTempdata[Iterations])>Integer.parseInt(TTempdata[Iterations+1])&&Integer.parseInt(TTempdata[Iterations+1])>Integer.parseInt(TTempdata[Iterations+2])&&Integer.parseInt(TTempdata[Iterations+2])>Integer.parseInt(TTempdata[Iterations+3]))
        {
            TempTrends.setText("Falling...");
            TempTrends.setForeground(Color.RED);         
        }  
        Iterations = HTempdata.length - 4;     
        HumidityTrends.setText("Staying Stable...");
        HumidityTrends.setForeground(Color.BLACK);
        if (Integer.parseInt(HTempdata[Iterations])<Integer.parseInt(HTempdata[Iterations+1])&&Integer.parseInt(HTempdata[Iterations+1])<Integer.parseInt(HTempdata[Iterations+2])&&Integer.parseInt(HTempdata[Iterations+2])<Integer.parseInt(HTempdata[Iterations+3]))
        {
            HumidityTrends.setText("On the Rise...");
            HumidityTrends.setForeground(Color.GREEN);         
        }     
        if (Integer.parseInt(HTempdata[Iterations])>Integer.parseInt(HTempdata[Iterations+1])&&Integer.parseInt(HTempdata[Iterations+1])>Integer.parseInt(HTempdata[Iterations+2])&&Integer.parseInt(HTempdata[Iterations+2])>Integer.parseInt(HTempdata[Iterations+3]))
        {
            HumidityTrends.setText("Falling...");
            HumidityTrends.setForeground(Color.RED);         
        }          
         Iterations = STempdata.length - 4;     
        SoilTrends.setText("Staying Stable...");
        SoilTrends.setForeground(Color.BLACK);
        if (Integer.parseInt(STempdata[Iterations])<Integer.parseInt(STempdata[Iterations+1])&&Integer.parseInt(STempdata[Iterations+1])<Integer.parseInt(STempdata[Iterations+2])&&Integer.parseInt(STempdata[Iterations+2])<Integer.parseInt(STempdata[Iterations+3]))
        {
            SoilTrends.setText("On the Rise...");
            SoilTrends.setForeground(Color.GREEN);         
        }     
        if (Integer.parseInt(STempdata[Iterations])>Integer.parseInt(STempdata[Iterations+1])&&Integer.parseInt(STempdata[Iterations+1])>Integer.parseInt(STempdata[Iterations+2])&&Integer.parseInt(STempdata[Iterations+2])>Integer.parseInt(STempdata[Iterations+3]))
        {
            SoilTrends.setText("Falling...");
            SoilTrends.setForeground(Color.RED);         
        }          
          Iterations = WTempdata.length - 4;     
        SoilTrends.setText("Staying Stable...");
        SoilTrends.setForeground(Color.BLACK);
        if (Integer.parseInt(WTempdata[Iterations])<Integer.parseInt(WTempdata[Iterations+1])&&Integer.parseInt(WTempdata[Iterations+1])<Integer.parseInt(WTempdata[Iterations+2])&&Integer.parseInt(WTempdata[Iterations+2])<Integer.parseInt(WTempdata[Iterations+3]))
        {
            SoilTrends.setText("On the Rise...");
            SoilTrends.setForeground(Color.GREEN);         
        }     
        if (Integer.parseInt(WTempdata[Iterations])>Integer.parseInt(WTempdata[Iterations+1])&&Integer.parseInt(WTempdata[Iterations+1])>Integer.parseInt(WTempdata[Iterations+2])&&Integer.parseInt(WTempdata[Iterations+2])>Integer.parseInt(WTempdata[Iterations+3]))
        {
            SoilTrends.setText("Falling...");
            SoilTrends.setForeground(Color.RED);         
        }                  
 }
    
 
    public void printTextField() {
        Trends();
        String[] Tdata,TTempdata,Hdata,HTempdata,Sdata,STempdata,Wdata,WTempdata;
        String TempreatureDataTemp, HumidityDataTemp, SoilPHDataTemp, WindSpeedDataTemp;

        String[] TimeDataTemp = TimeData.split(",");
        int Iterations = 3;
        Tdata = TempreatureData.split(":");
        TempreatureDataTemp =Tdata[0]+":";
        TTempdata = Tdata[1].split(",");
         Hdata = HumidityData.split(":");
        HumidityDataTemp =Hdata[0]+":"; 
        HTempdata = Hdata[1].split(",");
         Sdata = SoilPHData.split(":");
        SoilPHDataTemp =Sdata[0]+":"; 
        STempdata = Sdata[1].split(",");
         Wdata = WindSpeedData.split(":");
        WindSpeedDataTemp =Wdata[0]+":";   
        WTempdata = Wdata[1].split(",");
        Iterations = TTempdata.length - Iterations; 
        if (Iterations <0)
        {
            Iterations = 0;
        }
        while (Iterations < TTempdata.length)
        {
            TempreatureDataTemp = TempreatureDataTemp + TimeDataTemp[Iterations] + " : " +TTempdata[Iterations]+"'C" + " | ";
            
            Iterations = Iterations +1;
        }

        Iterations = 3;
         Iterations = HTempdata.length - Iterations; 
        if (Iterations <0)
        {
            Iterations = 0;
        }
        while (Iterations < HTempdata.length)
        {
            HumidityDataTemp = HumidityDataTemp + TimeDataTemp[Iterations] + " : " +HTempdata[Iterations]+"%" + " | ";
            
            Iterations = Iterations +1;
        }       



        Iterations = 3;
         Iterations = STempdata.length - Iterations; 
        if (Iterations <0)
        {
            Iterations = 0;
        }
        while (Iterations < STempdata.length)
        {
            SoilPHDataTemp = SoilPHDataTemp + TimeDataTemp[Iterations] + " : " +STempdata[Iterations]+"PH" + " | ";
            
            Iterations = Iterations +1;
        }       
        

        Iterations = 3;
         Iterations = WTempdata.length - Iterations; 
        if (Iterations <0)
        {
            Iterations = 0;
        }
        while (Iterations < WTempdata.length)
        {
            WindSpeedDataTemp = WindSpeedDataTemp + TimeDataTemp[Iterations] + " : " +WTempdata[Iterations]+"Mph" + " | ";
            
            Iterations = Iterations +1;
        }       
                
        
        
     DisplayTempreatureData.setText(TempreatureDataTemp);
    DisplayHumidityData.setText(HumidityDataTemp);
    DisplaySoilPHData.setText(SoilPHDataTemp);
    DisplayWindSpeedData.setText(WindSpeedDataTemp);

    }
   public class IncomingReader implements Runnable
    {
        @Override
        public void run() 
        {
            String[] data,Tempdata;
            String stream, Done = "DataSending", Done1 ="StaticData",Done2 ="FieldData";
            String FieldName;

            try 
            {
                while ((stream = reader.readLine()) != null) 
                {
                     data = stream.split(";");
                     if (data[0].equals(Done)) 
                     {
                         if (data[6].equals(Farmer))
                         {
                        TimeData = TimeData + data[1];
                        TempreatureData = TempreatureData +data[2];
                        HumidityData = HumidityData + data[3];
                        SoilPHData = SoilPHData + data[4];
                        WindSpeedData = WindSpeedData + data[5]; 
                        printTextField();
                        LineChart_AWT( );
                         }
                        
                     } 
                     else if (data[0].equals(Done1)) 
                     {
                         if (data[4].equals(Farmer))
                         {
                        username = data[1];
                        ActiveStation.setText(username);
                         StaticData = data[2];
                         Nitrogen = data[3];
                         
                         Slider1.setValue(Integer.parseInt(Nitrogen));	
                        Slider1.setEnabled(false);
                        WeatherStationData.setText(StaticData);
                        Tempdata = data[2].split(",");
                        FieldName = Tempdata[2];
                        UpdateField(username,Tempdata[3]);
                        isConnected = true;  
                        writer.println("FieldRequest;"+FieldName+";"+Farmer);
                        writer.flush(); 
                         }
                                             
                     } 
                     else if (data[0].equals(Done2)) 
                     {
                         if (data[2].equals(Farmer))
                         {
                         Tempdata = data[1].split(",");
                         UpdateField(Tempdata[0],Tempdata[1]);
                         }
                         
                     } 
                     else
                     {
                         System.out.println("No conditions met");
                     }
                     
                }
           }catch(IOException ex) { 
           System.out.println("Error reciving message from server");
           }
        }
    }
    
 

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DataDisplayScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DataDisplayScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DataDisplayScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DataDisplayScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DataDisplayScreen("WeatherStation1","FarmerJohn").setVisible(true);
          }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ActiveStation;
    private javax.swing.JTextField DisplayHumidityData;
    private javax.swing.JTextField DisplaySoilPHData;
    private javax.swing.JTextField DisplayTempreatureData;
    private javax.swing.JTextField DisplayWindSpeedData;
    private javax.swing.JButton East;
    private javax.swing.JTextField EastPosition;
    private javax.swing.JTextField HumidityTrends;
    private javax.swing.JPanel Jfreechartpanel;
    private javax.swing.JButton North;
    private javax.swing.JTextField NorthPosition;
    private javax.swing.JSlider Slider1;
    private javax.swing.JTextField SoilTrends;
    private javax.swing.JButton South;
    private javax.swing.JTextField SouthPosition;
    private javax.swing.JTextField TempTrends;
    private javax.swing.JComboBox<String> VariableX;
    private javax.swing.JComboBox<String> VariableY;
    private javax.swing.JTextField WeatherStationData;
    private javax.swing.JButton West;
    private javax.swing.JTextField WestPosition;
    private javax.swing.JTextField WindTrends;
    private javax.swing.JComboBox<String> colourMode;
    private javax.swing.JComboBox<String> fileTypeCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel saveLabel;
    private javax.swing.JTextField saveText;
    // End of variables declaration//GEN-END:variables
}
